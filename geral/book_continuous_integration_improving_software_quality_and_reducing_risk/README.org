#+TITLE: Continuous Integration: Improving Software Quality and Reducing Risk
#+AUTHOR: flaviogf
#+DATE: [2022-12-08 Thu]

* Resenha descritiva
Obra: Integração contínua: Melhorando qualidade de software e reduzindo riscos
Autor: Paul M, Duvall, Stephen M. Matyas III, Andrew Glover
Editora: Addison-Wesley Professional
Data: Junho de 2007
Edição: 1.a edição
Tamanho: 283 p

* Introdução
O objetivo principal do livro é introduzir os conceitos envolvidos no tema de Integração Contínua (CI).
O autor começa apresentando exemplos práticos de alto nível visando apresentar funcionalidades comuns, termos e componentes presentes em sistemas de CI.
Após é discutido abordagens de como é possível começar a integrar as práticas de CI no dia-a-dia de desenvolvimento, quais os valores que estas trazem e os motivos que preveni os times de começarem a aplicá-las.
Não só isso, mas o conteúdo também traz cenários de riscos que podem ser mitigados com a aplicação de CI.

* Resumo
O autor começa definindo o que CI se propõe a resolver trazendo um exemplo prático de um problema comum em algumas empresas de tecnologias que é a má prática de considerar o /build/ das aplicações como um "evento".
Esclarece que CI incluí compilação, recriação de banco de dados, execução de testes automatizados e inspeção, /deploy/ de software e recebimento de /feedback/.

*O que é um /build/?*
Um /build/ é muito mais que uma compilação (ou sua variação para linguagens dinâmicas).
Um /build/ deve constituir na execução da compilação, testes automatizados, inspeção e /deploy/.
Um /build/ é o processo de "juntar" o código-fonte e verificar se funcionam como uma unidade coesa.

O autor simplifica os passos da execução do processo de CI da seguinte maneira:
1. O desenvolvedor executa o /commit/ do código para o repositório de controle de versão, nesse mesmo momento o servidor de CI na máquina de integração está verificando por mudanças nesse repositório.
2. Logo após a execução do /commit/ o servidor de CI detecta que uma mudança ocorreu no repositório de controle de versão, o servidor de CI busca a cópia mais recente do código-fonte no repositório, então executa o /script/ de /build/, o qual executa a integração do /software/.
3. O servidor de CI gera /feedback/ pelos resultados dos /builds/ por e-mail para os membros do projeto.
4. O servidor de CI contínua verificando por mudanças no repositório de controle de versão.

Continuando é estabelecido os componentes de uma sistema de CI e suas responsabilidades.

*Desenvolvedor*
No momento que o desenvolvedor tenha executado todas as modificações relacionadas a sua atividade, ele roda um /build/ privado e então executa o /commit/ de suas mudanças para o repositório de controle de versão.
Esse passo pode ocorrer a qualquer momento a não afeta os passos seguintes do processo de CI.
Um /build/ de integração não acontece a não ser que tenha mudanças aplicadas no repositório de controle de versão.
Esse processo auxilia na descoberta de problemas de forma antecipada.
Uma vez que se tenha um /build/ automatizado que possa ser executado através de um único comando, o desenvolvedor está apto a executar CI.
Executando este /build/ automático sempre que haver uma mudança os times podem responder perguntas como:
1. Todos os componentes do /software/ funcionam juntos?
2. Qual é a complexidade do meu código?
3. O time está aderindo os padrões de código?
4. Qual a cobertura de testes automatizados da minha aplicação?
5. Todos os testes passaram após a última modificação?
6. Minha aplicação ainda atende os requisitos de desempenho?
7. Teve algum problema com o último /deploy/?

*Repositório de Controle de Versão*
De forma resumida o autor estabelece que para executar um sistema de CI é obrigatório a utilização de um sistema de controle de versão.
A execução do CI acontece no ramo principal do repositório no sistema de controle de versão.

*Servidor de CI*
O servidor de CI roda um /build/ de integração sempre que uma mudança é aplicada no repositório do sistema de controle de versão.
Normalmente o servidor de CI é configurado para verificar por mudanças no repositório do sistema de controle de versão a cada minuto.
O servidor de CI pega os arquivos de código e roda o /script/ ou /scripts/ de /build/.

*Script de build*
O /script/ de /build/ é um único /script/ ou um conjunto de /scripts/ utilizado para compilar, testar, inspecionar, e executar o /deploy/ de um /software/.
Um /script/ de /build/ pode ser executado sem a utilização de um sistema de CI a biblioteca Rake do Ruby é um exemplo de ferramenta que pode automatizar o ciclo de /build/ de um /software/.

*Mecanismo de Feedback*
Um dos propósitos-chave de um sistema de CI é produzir /feedback/ de um /build/ de integração, devido à necessidade de saber o mais rápido possível se teve um problema no último /build/.
Recebendo esta informação o problema pode ser resolvido rapidamente.

*Máquina de build de integração*
É uma máquina separada com a única responsabilidade de integrar software. É nesta máquina que o servidor de CI roda e este verifica de tempos em tempos por mudanças no repositório de controle de versão.

*Como saber se está aplicando CI da forma correta?*
O autor defini algumas questões básicas que auxiliam no entendimento se as práticas de CI estão sendo aplicadas da forma correta, estas são:
1. Está sendo utilizado um sistema de controle de versão?
2. O processo de /build/ é automatizado? Ele executa inteiramente sem intervenção?
3. Está sendo escrito e rodado testes automatizados?
4. A execução dos testes faz parte do processo de /build/?
5. Como é estabelecido os padrões de código e /design/?
6. Qual dos mecanismos de /feedback/ são automatizados?
7. O /build/ do /software/ está sendo executado em uma máquina separada?
