#+TITLE: Terraform Docker Tutorial
#+AUTHOR: flaviogf
#+DATE: [2022-12-26 Mon]

Infrastructure as code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface.

- Terraform can manage infrastructure on multiple cloud platforms
- The human-readable configuration language helps you write infrastructure code quickly
- Terraform's state allows you to track resources changes throughout your deployments
- You can commit your configurations to version control to safely collaborate on infrastructure

Terraform plugins called providers let Terraform interact with cloud platforms and other services via their APIs.
Currently, exists more than 1,000 providers to manage resources on:

1. AWS
2. GCP
3. Kubernetes
4. Helm
5. GitHub
6. Splunk
7. Datadog
8. And many others

Steps to deploy infrastructure with Terraform:

1. Scope
2. Author
3. Initialize
4. Plan
5. Apply

Terraform keeps track of your real infrastructure in a state file, which acts as a source of truth for your environment.

#+begin_src bash
terraform init
#+end_src

#+begin_src bash
terraform apply
#+end_src

#+begin_src bash
terraform destroy
#+end_src

#+begin_src bash
terraform fmt
#+end_src

#+begin_src bash
terraform validate
#+end_src

#+begin_src bash
terraform show
#+end_src

#+begin_src bash
terraform state list
#+end_src

#+begin_src bash
terraform apply -var "container_name=YetAnotherName"
#+end_src

#+begin_src bash
terraform output
#+end_src
