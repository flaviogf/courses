#+TITLE: Effective go
#+AUTHOR: flaviogf
#+DATE: [2022-10-16 Sun]

+ Go is a new language, although it borrows ideas from existing languages
+ To write Go well, it's important to understand its properties and idioms
+ It's also important to know the established convetions for programming in Go

* Examples
+ The go package sources are intended to server not only as the core library but also as examples of how to use the language

* Formatting
+ With Go the machine take care of most formatting issues
+ The gofmt operates at the package level rather than source file level, it reads a Go program and emits the source in a standard style of indentation and vertical alignment, retaining an if necessary reformatting comments
+ All Go code in the standard packages has been formatted with gofmt
+ Indentation
+ Line length
+ Parentheses

* Commentary
+ Go provides C-style //**// block comments and C++-stule // line comments
+ Line comments are the norm
+ Block comments appear mostly as package comments
+ Comments that appear before top-level declarations, with no intervening newlines, are considered to document the declaration itself
+ These doc comments are the primary documentation for a given Go package or command

* Names
+ Names are as important in Go as in any other language
+ They even have semantic effect
+ The visibility of a name outsied a package is determined by whether its first character is upper case

** Package names
+ When a package is imported, the package name becomes an accessor for the contents
+ The package name should be good: short, concise, evocative
+ By convention, packages are give lower case, single-word names; there should be no need for underscores or mixedCaps
+ Don't worry about collisions, the package name is only the default name for imports; it need not be unique across all source code, and the importing package can choose a different name to use locally
+ Another convention is that the package name is the base name of its source directory
+ The importer of a package will use the name to refer to its content, so exported names in the package can use that fact to avoid repetition
+ Don't use the import . notation
+ For instance, the beffered reader type in the bufio package is called Reader, not BufReader, because users see it as bufio.Reader, which is clear, consice name
+ Because imported entities are always addressed with their package name, they don't conflict with each other
+ Similarly, the function to make new instances of ring.Ring --- wich is the definition of a constructor in go --- would normally be called NewRing, but since Ring is the only type exported by the package, and since the package is called ring, it's called just New, which clients of the package see as ring.New

** Getters
+ Go doesn't provide automatic support for getters and setters
+ There's nothing wrong with providing getters and setters yourself, and it's often approprieate to do so
+ But it's neither idiomatic nor necessary to put Get into the getter's name
+ If you have a field called owner (lower case, unexported), the getter method should be called Owner (upper case, exported) not GetOwner
+ The use of upper-case names for export provides the hook to discriminate the field from the method
+ A setter function, if needed, will likely be called SetOwner
+ Both names read well in practice

#+begin_src go
  owner := obj.Owner()

  if owner != user {
    obj.SetOwner(user)
  }
#+end_src

** Interface names
+ By convetion, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc

** MixedCaps
+ Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multiword names

** Semicolons
+ Like C, Go's formal grammar uses semicolon to terminate statements
+ But unlike C those semicolons do not appear in the source
+ Instead the lexer uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them
+ The rule is this, if the last token before a newline is a identifier the lexer always insert a semicolon after the token
+ Idiomatica Go programs have semicolons only in places such as for loops clauses, to separete the initializer, condition, and continuation elements
+ They are also necessary to separte multiple statements on a line
+ One consequence of the semicolon insertion rule is that you cannot put the opening brace of a control structure on the next line. If you do, a semicolon will be inserted before the brace, which could cause unwanted effects

** Control structure
+ The control structures of Go are related to those of C but differ in important ways
+ There is no do or while loop, only a slightly generalized for; switch is more flexible; if and switch accept an optional initialization statement like that of for; break and continue take an optional label to identify what to break or continue
+ And there are a new control structure including type switch and a multiway communications multiplexer, select
+ The syntax is also slightly different; there are no parentheses and the bodies must always be brace-delimited

#+begin_src go
  if x > 0 {
  }
#+end_src

+ Mandatory braces encourage writing simple if statements on multiple lines
+ It's good style to do so anyway, especialy when the body contains a control statement such as return or break
+ Since if and switch accept an initialization statement, it's common to see one used to set up a local variable

#+begin_src go
  if err := file.Chmod(0644); err != nil {
    log.Print(err)
    return
  }
#+end_src

+ In the Go libraries, you'll find that when an if statement doesn't flow into the next statement, that is, the body ends in break, continue, goto, or return the unnecessary else is ommited

#+begin_src go
  f, err := os.Open(name)

  if err != nil {
    return err
  }

  codeUsing(f)
#+end_src

** Redeclaration and reassignment
+ It's worth to nothing that in Go the scope of function parameters and return values is the same as the function body, even though they appear lexically outside the braces that enclose the body

** For
+ The Go for loop is similar to but not the same as C's
+ It unifies for and while and there is no do-while
+ There are three forms, only one of wich has semicolons

+ Like a C for
#+begin_src go
  for init; condition; post { }
#+end_src

+ Like a C while
#+begin_src go
  for condition { }
#+end_src

+ Like a C for(;;)
#+begin_src go
  for { }
#+end_src

+ Short declarations make it easy to declare the index variable right in the loop
#+begin_src go
  sum := 0
  for i := 0; i < 10; i++ {
    sum += i
  }
#+end_src

+ If your are looping over an array, slice, string, or map, or reading from a channel, a range clause can manage the loop
#+begin_src go
  for key, value := range oldMap {
    newMap[key] = value
  }
#+end_src

+ If you only need the first item in the range (the key or index), drop the second
#+begin_src go
  for key := range m {
    if key.expired() {
      delete(m, key)
    }
  }
#+end_src

+ If you only need the second item in the range (the value), use the blank identifier, an underscore, to discard the first
#+begin_src go
  sum := 0
  if _, value := range array {
    sum += value
  }
#+end_src

+ For strings, the range does more work for you, breaking out individual Unicode code points by parsing the UTF-8
+ The name with the associate builtin type rune is Go terminology for single Unicode code point
+ Finally Go has no comma operator and ++ and -- are statements not expressions

** Switch
+ Go's switch is more general than C's
+ The expressions need not to be constants or even integers
+ The cases are evaluated top to bottom until a match is found
+ And if the switch has no expression it switchs on true
+ It's therefore possible and idiomatic to write an if-else-if-else chains as a switch

#+begin_src go
  func unhex(c byte) byte {
    switch {
    case '0' <= c && c <= '9':
      return c - '0'
    case 'a' <= c && c <= 'f':
      return c - 'a' + 10
    case 'A' <= c && c <= 'F':
      return c - 'A' + 10
    }

    return 0
  }
#+end_src

+ There is no automatic fall through, but cases can be presented in comma-separated lists
#+begin_src go
  func shouldEscape(c byte) bool {
    switch c {
    case ' ', '?', '&', '=', '#', '+', '%':
      return true
    }

    return false
  }
#+end_src

+ Although they are not nearly as common in Go as some other C-like languages, break statements can be used to terminate a switch early
+ Sometimes, though, it's necessary to break out of a surroundin loop, not the switch, and in Go that can be accomplished by putting a label on the loop and "breaking" to that label

#+begin_src go
  Loop:
      for n := 0; n < len(src); n += size {
        switch {
          case src[n] < sizeOne:
            if validateOnly {
              break
            }
            size = 1
            update(src[n])
          case src[n] < sizeTwo:
            if n+1 >= len(src) {
              err = errShortInput
              break Loop
            }

            if validateOnly {
              break
            }
            size = 2
            update(src[n] + src[n+1]<<shift)
        }
      }
#+end_src

+ Of course, the continue statement also accepts an optional label but it applies only to loops

** Type switch
+ A switch can also be used to discover the dynamic type of an interface variable
+ Such a type switch uses the syntax of a type assertion with the keyword type inside the parentheses
+ If the switch declares a variable in the expression the variable will have the corresponding type in each clause
+ It's also idiomatic to reuse the name in such cases, in effect declaring a new variable with the same name but a different type in each case

#+begin_src go
  var t interface{}

  t = functionOfSomeType()

  switch t := t.(type) {
    default:
      fmt.Printf("unexpected type %T\n", t)
    case bool:
      fmt.Printf("boolean %t\n", t)
    case int:
      fmt.Printf("integer %d\n", t)
    case *bool:
      fmt.Printf("pointer to boolean %t\n", t)
    case *int:
      fmt.Printf("pointer to integer %d\n" t)
  }
#+end_src

* Functions
** Multiple return values
+ One of Go's unusual features is tha functions and method can return multiple values
+ In C, a write error is signaled by a negative count with the error code secreted away ina volatile location
+ In Go, Write can return a count and an error: "Yes, your wrote some bytes, but not all of them because you filled the device
+ The signature of the Write method on files from package os is:

  #+begin_src go
    func (file *File) Write(b []byte) (n int, err error)
  #+end_src

+ The documentation says, it return the number of bytes written and a non-nil error when n != len(b)
+ This is a common style

** Named result parameters
+ The return or result "parameters" of a Go function ca be given names and used as regular variables, just like the incoming parameters
+ When named, they are initialized to the zero for their types when the functions begins
+ If the function executes a return statement with no arguments, the current values of the result parameter are used as the returned values
+ The names are not mandatory but they can make code shorter and clearer

  #+begin_src go
    func nextInt(b []byte, pos int) (value, nextPos int)
  #+end_src

** Defer
+ Go's defer statement schedules a function call (the deferred function) to be run immediatyle before the function executing the defer returns
+ It's a unusual but effective way to deal with situations such as resources that must be released regardless of which path a function takes to return
+ The cannical examples are unlocking a mutex or closing a file

  #+begin_src go
    func Contents(filename string) (string, error) {
      f, err := os.Open(filename)

      if err != nil {
        return "", err
      }

      defer f.Close()

      var result []byte
      buf := make([]byte, 100)
      for {
        n, err := f.Read(buf[0:])

        result = append(result, buf[0:n]...)

        if err != nil {
          if err == io.EOF {
            break
          }

          return "", err
        }
      }

      return string(result), nil
    }
  #+end_src

+ Deferring a call to a function such as Close has two advantages
+ It guarantees that you will never forget to close the file
+ It means that the close sits near the open, which is much clearer than placing it at the end of the function
+ The arguments to the deferred function (which include the received if the function is a method) are evaluated when the defer executes, not when the call executes
+ Besides avoiding worries about variables changing values as the function executes, this means that a single deferred call site can defer multiple function executions
+ Deferred functions are executed in LIFO order
+ Arguments to deferred functions are evaluated when the defer executes
+ For programmes accustomed to block-level resource management from other languages, defer may seem peculiar
+ But its most interesting and powerful applications come precisely from the fact that itś not block-based but function-based

* Data
** Allocation with new
+ Go has two allocation primitives
+ The built-in functions new and make
+ New it's a built-in function that allocates memory, it does not initialize the memory, it only zeros it

** Constructors and composite literals
+ Sometimes the zero value isn't good enough and an initializing constructor is necessary
+ Note that, unlike in C, it's perfectly OK to return the address of a local variable; the storage associated with the variable survives after the function returns
+ In fact, taking the address of a composite literal allocates a fresh instance each time it is evaluated
+ The fields of a composite literal are laid out in order and must all be present
+ However, by labeling the elements explicitly as field:value pairs, the initializer can appear in any order, with the missing ones left as theirs respective zero values
+ Composite literals can also be created for arrays, slices, and maps, with the field labels being indices or map keys as appropriate

** Alocation with make
+ The built-in function make serves a purpose different from new
+ It creates slices, maps, and channels only
+ And it returns an initialized (not zeroed) value of type T
+ The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use
+ A slice, for example, is a three-item descriptor containing a pointer to the data, the length, and the capacity
+ And until those items are initialized, the slice is nil

** Arrays
+ Arrays are useful when planning the detailed layout of memory and sometimes can help avoid allocation
+ But primarily they are a building block for slices
+ There are major differences between the ways arrays work in Go and C
+ Arrays are values, assigning one array to another copies all the elements
+ In particular, if you pass an array to a function, it will receive a copy of the arraym not a pointer to it
+ The size of an array is part of its type, the types [10]int and [20]int are distinct

** Slices
+ Slices wrap arrays to give a more general, powerful, and convenient interface to sequences of data
+ Slices hold references to an underlying array, and if you assing one slice to another, both refer to the same array
+ If a function takes a slice argument, changes it makes to the elements of the slice will be visible to the caller
+ Analogous to passing a pointer to the underlying array
+ Although a function can modify the elements of slice, the slice itself (the run-time data structure holding the pointer, length, and capacity) is passed by value

** Two-dimensional slices
+ Go's arrays and slices are one-dimensional
+ To create the equivalente of a 2D array or slice, it is necessary to define an array-of-arrays or slice-of-slices
+ Because slices are variable-length, it is possible to have each inner slice be a different length
+ Sometimes it's necessary to allocate a 2D slice
+ There are two ways to achieve this
+ One is to allocate each slice independently
+ The other is to allocate a single array and point the individual slices into it

** Maps
+ Maps are a convenient and powerful built-in data structure that associates values of one type (the key) with values of another type (the element or value)
+ The key can be of any type for which th equality operator is defined, such as integers, floating point and complex numbers, strings, pointers, interfaces (as long as the dynamic type supports equality), structs and arrays
+ Slices cannot be used as map keys, because equality is not defined on them
+ Like slices, maps hold references to an underlying data structure
+ If you pass a map to a function that changes the contents of the map, the changes will be visible in the caller
+ Maps can be constructured using the usual composite literal syntax with colon-separated key value pairs, so it's easy to build them during initialization
+ Assigning and fetching map values looks syntactically just like doing the same for arrays and slices except that the index doesn't need to be an integer
+ An attempt to fetch a map value with a key that is not present in the map will return the zero value for the type of the entries in the map
+ A set can be implemented as a map with value type bool, set the map entry to true to put the value in the set, and then test it by simple indexing
+ Sometimes you need to distinguish a missing entry from a zero value
+ You can discriminate with a form of multiple assignment
+ Fo obvious reasons this is called the "comma ok" idiom
+ To test for presence in the map without worring about the actual value, you can use the blank identifier in place of the usual variable for the value
+ To delete a map entry, use the delete built-in function, whose argument are the map and the key to be deleted
+ It's saft to do this even if the keys is already absent from the map

** Printing
+ Formatted printing in Go uses a style similar to C's printf family but is richer and more general
+ The functions live in the fmt package and have capitalized names
+ The formatted print functions fmt.Fprint and friends take as a first argument any object that implements the io.Writer interface; the variables os.Stdout and os.Stderr are familiar instances
+ Here things start to diverge from C, the numeric format such as %d do not take flags for sidnedness or size; instead, the printing routines use the type of ther argument to decide these properties
+ If you just want the default conversion, such as decimal for integers, you can use the catchall format %v; the result is exactly what Print and Println would produce
+ Moreover, that format can print any value, even arrays, slices, structs, and maps
+ When priting a struct, the modified format %+v annotates the fields of the structure with their names, and for any value the alternate format %#v prints the value in full Go syntax
+ That quoted string format is also available trough %q when applied to a value of type string or []byte
+ The alternate format %#q will use backquotes instead if possible
+ The %x works on strings, byte, arrays and slices as well as on integers, generating a long hexadecimal string, and with a space in the format (% x) it puts spaces between the bytes
+ Another handy format is %T, which prints the type of a value
+ If you want to control the defaut format for a custom type, all that's required is to define a method with the signature String() string on the type
+ If you need to print values of type T as well as pointers to T, the receiver for String must be of value type
+ There is one importante detail to understand about this approach, however: don't construct a String methdo by calling Sprintf in a way that will recur into your String method indefinitely
+ This can happend inf the Sprintf call attempts to print the receiver directly as a string
+ It's also easy to fix: convert the argument to the basic string type, which does not have the method

** Append
+ What append does is append the elementes to the end of the slice and return the result
+ The result needs o be returned because, the underlying array may change
+ Append works a little like Printf, collecting an arbitraty number of arguments

* Initialization
+ Altough it doesn't look superficially very different from initialization i C or C++, initialization in Go is more powerful
+ Complex structures can be built during initialization and the ordering issues amongo initialized objects, even among different packages, are handled correctly

** Constants
+ Contants in Go are just that --- constants
+ They are created at compile time even when defined as locals in functions
+ They can only be numbers, characters (runes), strings or booleans
+ Because of the compile-time restriction, the expressions that define them must be constant expressions, evaluatable by the compiler
+ In Go, enumerated constants are created using the iota enumerator
+ The ability to attach a method such as String to any user-defined type makes it possible for arbitrary values to format themselves automatically for printing
+ Although you'll see it most often applied to structs, this techinique is also useful for scalar types such as floating-point types

** Variables
+ Variables can be initialized just like constants but the initializer can be a general expression computed at run time

** The init function
+ Each source file can definie its own niladic init function to set up whatever state is required
+ Actually each file can have multiple init functions
+ Init is called after all the variable declarartions in the package have evaluated ther initializers
+ And those are evaluated only after all the imported packages have benn initialized
+ Besides initializations that cannot be expressed as declarations, a common use of init functions is to verify or repair correcteness of the program state before real execution begins

* Methods
** Pointers vs. Values
+ Methods can be defined for any named type (except a pointer or an interface)
+ The receiver does not have to be a struct
+ We wrote an Append function
+ We can define it as a method on slcies instead
+ To do this, we first declare a named type to wich we can bind the method, and the make the receiver for the method a value of tha type

  #+begin_src go
    type ByteSlize []byte

    func (slice ByteSlice) Append(data []byte) []byte {
      // Body
    }
  #+end_src

+ This stil requires the method to return the updated slice
+ We can eliminate that clumsiness by redefining the method to take a pointer to a ByteSlice as its receiver, so the method can overwirte the caller's slice

#+begin_src go
  func (p *ByteSlice) Append(data []byte) {
    slice := *p
    // Body
    *p = slice
  }
#+end_src

+ In fact, we can do even better
+ If we modify our function so it looks like a standard Write method, like this

#+begin_src go
  func (p *ByteSlice) Write(data []byte) (n int, err error) {
    slice := *p
    // Body
    *p = slice
    return len(data), nil
  }
#+end_src

+ Then the *ByteSlice satisfies the standard interface io.Writer, which is handy. For instance we can print into one
+ We pass the address of a ByteSlice because only *ByteSlice satisfies io.Writer
+ The rule about pointers vs. values for receivers is that value methods can be invoked on pointers and values, but pointer methods can only be invoked on pointers
+ This rule arises because pointer methods can modify the receiver
+ Invoking them on a value would cause the method to receive a copy of the value, so any modification would be discarded
+ The language therefoe disallows this mistake
+ There is a handy exception, tough
+ When the value is addressable, the language takes care of the common case of invoking a pointer method on a value by inserting the address operator automatically
+ By the way, the idea of using Write on a slice of bytes is central to the implementation of bytes.Buffer

** Interfaces and other types
*** Interfaces
+ Interfaces in Go provide a way to specify the behavior of an object
+ If something can do this, the it can be used here
+ Interfaces with only one or two methods are common in Go code
+ And are usually given a name derived from the method, such as io.Writer for something that implements Write
+ A type can implement multiple interfaces
+ For instance, a collection can be sorted by the routines in package sort if it implements sort.Interface, wich cointains Len(), Less(i, j int) bool, and Swap(i, j int)

*** Conversions
+ The Sprint has complexity O(N^2), which is poor
+ If we convert the Sequence to a plain []int before calling Sprint wecan speed it up
+ Thes method is another example of the conversion technique for calling Sprintf sfaly from a String method
+ Because the two types (Sequence and []int) are the same if we ignore the type name, it's legal to convert between them
+ The conversion doesn't create a new value, it just temporarily acts as though the existing value has a new type
+ There are other legal conversions, such as from integer to floating point, that do create a new value

*** Interface conversions and type assertions
+ Type switchs are a form a coversion
+ They take an inferface and, for each case in the switch, in a sense convert it to the type of that case
+ What if there's only one type we care about? If we know the value holds a string and we just want to extract it?
+ A one-case type switch would do, but so sould a type assertion
+ A type assertion takes an interface value and extracts from it a value of the specified explicit type
+ That type must either be the concrete type held by the inferface, or a second interface type that the value can be converted to
+ But if it turns out that the value does not contain the specified type, the program will crash with a run-time error
+ To guard agains that, use the "comma ok" idiom to test safely, whether the value is a string

*** Generality
+ If a type exists only to implement an interface and will never have exported methods beyond that interface, there is no need to export the type itself
+ Exporting just the interface make it clear the value has no intersting behavior beyond what is described in the interface
